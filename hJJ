<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Viddit</title>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script src="https://cdn.jsdelivr.net/npm/appwrite@13.0.1"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        body {
            font-family: 'Inter', sans-serif;
            background: #000000;
            color: #e5e7eb;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            -webkit-overflow-scrolling: touch;
        }

        .header {
            position: sticky;
            top: 0;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(8px);
            padding: 0.75rem 1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
            z-index: 1000;
            border-bottom: 1px solid #1f2937;
            flex-wrap: nowrap;
        }

        .header h1 {
            font-size: 1.5rem;
            font-weight: 700;
            color: #8b5cf6;
            margin: 0;
            flex-shrink: 0;
        }

        .search-bar input {
            background: #1f2937;
            border: 1px solid #4b5563;
            color: #e5e7eb;
            padding: 0.4rem 0.8rem;
            border-radius: 9999px;
            width: 100%;
            max-width: 200px;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            flex-shrink: 1;
        }

        .search-bar input:focus {
            outline: none;
            border-color: #8b5cf6;
            box-shadow: 0 0 8px rgba(139, 92, 246, 0.3);
        }

        .header-buttons {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            flex-shrink: 0;
        }

        .header-buttons button, .header-buttons img {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .header-buttons button:hover, .header-buttons img:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .upload-btn {
            background: #8b5cf6;
            color: #ffffff;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            font-weight: 500;
            border: none;
            cursor: pointer;
            line-height: 1;
        }

        .logout-btn {
            background: #ef4444;
            padding: 0.4rem 1rem;
            border-radius: 9999px;
            font-weight: 500;
            position: fixed;
            top: 1rem;
            right: 1rem;
            z-index: 1001;
            color: #ffffff;
            font-size: 0.9rem;
        }

        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 1rem;
            padding: 1.5rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .video-card {
            background: #1f2937;
            border-radius: 0.75rem;
            overflow: hidden;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            cursor: pointer;
            border: 1px solid #4b5563;
            display: flex;
            flex-direction: column;
        }

        .video-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        }

        .thumbnail-container {
            position: relative;
            width: 100%;
            height: 140px; /* Fixed height for all thumbnails */
            background: #000; /* Black background for empty space */
        }

        .thumbnail-container img {
            width: 100%;
            height: 100%;
            object-fit: contain; /* Preserve aspect ratio, no cropping */
            border-bottom: 2px solid #8b5cf6;
        }

        .title-section {
            padding: 0.5rem;
            border-top: 2px solid #8b5cf6; /* Default purple border */
            flex-grow: 1;
            position: relative; /* Ensure proper stacking context */
        }

        .title-section.golden-border {
            border-top: none; /* Remove default purple border */
            box-shadow: 0 0 10px 2px #FFD700, 0 0 20px 5px rgba(255, 215, 0, 0.5); /* Glowing golden effect */
            background: linear-gradient(to top, transparent, transparent 1px, #1f2937 1px); /* Hide any residual purple */
        }

        .video-card h3 {
            margin: 0;
            font-size: 0.95rem;
            font-weight: 500;
            color: #e5e7eb;
        }

        .upload-form {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #1f2937;
            padding: 1.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            width: 90%;
            max-width: 450px;
            animation: slideIn 0.3s ease;
            border: 1px solid #4b5563;
        }

        .upload-form input {
            background: #374151;
            border: 1px solid #4b5563;
            color: #e5e7eb;
            padding: 0.6rem;
            border-radius: 0.5rem;
            margin-bottom: 0.75rem;
            width: 100%;
            font-size: 0.9rem;
        }

        .upload-form button {
            background: #8b5cf6;
            padding: 0.6rem;
            border-radius: 0.5rem;
            font-weight: 500;
            margin-right: 0.5rem;
            color: #ffffff;
            font-size: 0.9rem;
        }

        .upload-form button.cancel-btn {
            background: #ef4444;
        }

        .upload-status {
            margin-top: 0.75rem;
            text-align: center;
            color: #9ca3af;
            font-size: 0.9rem;
        }

        .video-popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #1f2937;
            padding: 1.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            width: 90%;
            max-width: 800px;
            animation: slideIn 0.3s ease;
            border: 1px solid #4b5563;
        }

        .video-popup iframe {
            width: 100%;
            height: 450px;
            border-radius: 0.5rem;
        }

        .video-popup h3 {
            margin-top: 0.75rem;
            font-size: 1.1rem;
            font-weight: 600;
            color: #e5e7eb;
            text-align: center;
        }

        .profile-popup {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000000;
            padding: 1.5rem;
            z-index: 1000;
            overflow-y: auto;
            animation: fadeIn 0.3s ease;
            border-top: 1px solid #1f2937;
        }

        .profile-info {
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .profile-info img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            border: 3px solid #8b5cf6;
            margin-bottom: 0.75rem;
        }

        .profile-info h2 {
            font-size: 1.5rem;
            font-weight: 600;
            color: #e5e7eb;
        }

        .profile-info p {
            color: #9ca3af;
            font-size: 0.9rem;
        }

        .profile-videos {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
            gap: 1rem;
            padding: 1rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 999;
        }

        @keyframes slideIn {
            from { transform: translate(-50%, -60%); opacity: 0; }
            to { transform: translate(-50%, -50%); opacity: 1; }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .spinner {
            display: inline-block;
            width: 1.2rem;
            height: 1.2rem;
            border: 2px solid #4b5563;
            border-top: 2px solid #8b5cf6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 0.5rem;
            vertical-align: middle;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .header {
                padding: 0.5rem;
                gap: 0.5rem;
                flex-wrap: nowrap;
            }

            .header h1 {
                font-size: 1.2rem;
            }

            .search-bar input {
                max-width: 120px;
                padding: 0.3rem 0.5rem;
                font-size: 0.8rem;
            }

            .upload-btn {
                width: 28px;
                height: 28px;
                font-size: 1rem;
            }

            .g_id_signin {
                transform: scale(0.8);
            }

            .profile-pic {
                width: 28px !important;
                height: 28px !important;
            }

            .video-grid, .profile-videos {
                grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
                padding: 1rem;
            }

            .video-popup iframe {
                height: 300px;
            }

            .profile-info img {
                width: 80px;
                height: 80px;
            }

            .profile-info h2 {
                font-size: 1.3rem;
            }
        }

        @media (max-width: 480px) {
            .header {
                padding: 0.4rem;
            }

            .search-bar input {
                max-width: 100px;
            }

            .upload-btn {
                width: 24px;
                height: 24px;
                font-size: 0.9rem;
            }

            .video-grid, .profile-videos {
                grid-template-columns: 1fr;
            }

            .video-popup iframe {
                height: 200px;
            }

            .upload-form {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Viddit</h1>
        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Search videos..." oninput="displayMedia()">
        </div>
        <div class="header-buttons flex items-center space-x-2">
            <button class="upload-btn" id="uploadBtn" onclick="checkLoginAndShowUpload()" style="display: none;">+</button>
            <div id="g_id_onload"
                 data-client_id="1074551886895-70e3csmiqkgiu8jf5e3oc87hbjj78929.apps.googleusercontent.com"
                 data-callback="handleCredentialResponse"
                 data-auto_prompt="false">
            </div>
            <div class="g_id_signin" data-type="standard" data-size="small" data-theme="filled_black" data-text="sign_in_with" data-shape="circle"></div>
            <img id="profilePic" class="profile-pic w-8 h-8 rounded-full cursor-pointer" src="defaultdp.png" alt="Profile" style="display: none;" onclick="openProfilePopup()">
        </div>
    </div>

    <div class="overlay" id="overlay"></div>

    <div class="upload-form" id="uploadForm">
        <h2 class="text-lg font-semibold mb-3">Upload Video</h2>
        <input type="file" id="mediaInput" accept="video/mp4" required>
        <input type="text" id="mediaTitle" placeholder="Enter video title" required>
        <div class="flex justify-end space-x-2">
            <button id="uploadButton" onclick="uploadMedia()">Upload</button>
            <button class="cancel-btn" onclick="hideUploadForm()">Cancel</button>
        </div>
        <div class="upload-status" id="uploadStatus"></div>
    </div>

    <div class="video-popup" id="mediaPopup">
        <iframe id="popupVideo" allowfullscreen controls></iframe>
        <h3 id="popupTitle" class="text-center"></h3>
    </div>

    <div class="profile-popup" id="profilePopup">
        <button class="logout-btn" onclick="logout()">Logout</button>
        <div class="profile-info" id="profileInfo"></div>
        <div class="profile-videos" id="profileVideos"></div>
    </div>

    <div class="video-grid" id="mediaGrid"></div>

    <script>
        // Google Sign-In callback
        function handleCredentialResponse(response) {
            console.log("Google Sign-In response received:", response);
            try {
                const data = JSON.parse(atob(response.credential.split('.')[1]));
                console.log("Parsed Google Sign-In data:", data);
                localStorage.setItem('user', JSON.stringify({ email: data.email, name: data.name }));
                updateHeader();
                displayMedia();
            } catch (error) {
                console.error('Error parsing Google credential:', error);
                alert('Failed to process Google Sign-In. Please try again. Check the console for more details.');
            }
        }

        // Initialize Appwrite client
        const client = new Appwrite.Client()
            .setEndpoint('https://cloud.appwrite.io/v1')
            .setProject('680c91140011c9f522d2');

        const database = new Appwrite.Databases(client);
        const storage = new Appwrite.Storage(client);

        const DATABASE_ID = '680c91be002fd0778c70';
        const VIDEO_COLLECTION_ID = '680c91d40032b50ad10b';
        const STORAGE_BUCKET_ID = '68106a79003715c715d8';

        // Logout function
        function logout() {
            console.log("Logging out user...");
            localStorage.removeItem('user');
            updateHeader();
            closeProfilePopup();
            displayMedia();
            history.replaceState(null, '', '/#home');
        }

        // Update header based on login state
        function updateHeader() {
            console.log("Updating header...");
            const user = JSON.parse(localStorage.getItem('user'));
            const signInButton = document.querySelector('.g_id_signin');
            const profilePic = document.getElementById('profilePic');
            const uploadBtn = document.getElementById('uploadBtn');

            if (user) {
                console.log("User is logged in:", user);
                signInButton.style.display = 'none';
                profilePic.style.display = 'block';
                uploadBtn.style.display = 'inline-block';
            } else {
                console.log("User is not logged in.");
                signInButton.style.display = 'block';
                profilePic.style.display = 'none';
                uploadBtn.style.display = 'none';
            }
        }

        // Check login before showing upload form
        function checkLoginAndShowUpload() {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user) {
                alert('Please log in to upload videos.');
                return;
            }
            showUploadForm();
        }

        function showUploadForm() {
            console.log("Showing upload form...");
            document.getElementById('uploadForm').style.display = 'block';
            document.getElementById('overlay').style.display = 'block';
            document.getElementById('uploadStatus').textContent = '';
        }

        function hideUploadForm() {
            console.log("Hiding upload form...");
            document.getElementById('uploadForm').style.display = 'none';
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('mediaInput').value = '';
            document.getElementById('mediaTitle').value = '';
            document.getElementById('uploadStatus').textContent = '';
            document.getElementById('uploadButton').disabled = false;
            document.getElementById('mediaInput').disabled = false;
            document.getElementById('mediaTitle').disabled = false;
        }

        // Function to capture the first frame of the video as a thumbnail
        async function captureThumbnail(videoFile) {
            return new Promise((resolve, reject) => {
                console.log("Capturing thumbnail for video...");
                const videoElement = document.createElement('video');
                videoElement.src = URL.createObjectURL(videoFile);
                videoElement.muted = true;
                videoElement.preload = 'metadata';

                videoElement.onloadedmetadata = () => {
                    console.log("Video metadata loaded, seeking to first frame...");
                    videoElement.currentTime = 0; // Seek to the first frame
                };

                videoElement.onseeked = () => {
                    console.log("Video seeked to first frame, capturing thumbnail...");
                    const canvas = document.createElement('canvas');
                    canvas.width = videoElement.videoWidth;
                    canvas.height = videoElement.videoHeight;
                    const ctx = canvas.getContext('2d');
                    ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

                    canvas.toBlob(blob => {
                        if (blob) {
                            console.log("Thumbnail blob generated successfully.");
                            const thumbnailFile = new File([blob], 'thumbnail.jpg', { type: 'image/jpeg' });
                            resolve(thumbnailFile);
                        } else {
                            console.error("Failed to generate thumbnail blob.");
                            reject(new Error('Failed to generate thumbnail blob'));
                        }
                        URL.revokeObjectURL(videoElement.src);
                    }, 'image/jpeg', 0.9); // Quality set to 0.9
                };

                videoElement.onerror = () => {
                    console.error("Error loading video for thumbnail generation.");
                    reject(new Error('Failed to load video for thumbnail generation'));
                    URL.revokeObjectURL(videoElement.src);
                };

                videoElement.load();
            });
        }

        // Function to upload thumbnail to Appwrite Storage
        async function uploadThumbnailToStorage(thumbnailFile) {
            try {
                console.log("Uploading thumbnail to Appwrite Storage...");
                const response = await storage.createFile(
                    STORAGE_BUCKET_ID,
                    'unique()',
                    thumbnailFile
                );
                const thumbnailUrl = `https://cloud.appwrite.io/v1/storage/buckets/${STORAGE_BUCKET_ID}/files/${response.$id}/view?project=680c91140011c9f522d2`;
                console.log("Thumbnail uploaded successfully, URL:", thumbnailUrl);
                return thumbnailUrl;
            } catch (error) {
                console.error('Error uploading thumbnail:', error);
                throw new Error('Failed to upload thumbnail');
            }
        }

        async function uploadMedia() {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user) {
                alert('Please log in to upload videos.');
                hideUploadForm();
                return;
            }

            const mediaInput = document.getElementById('mediaInput');
            const mediaTitle = document.getElementById('mediaTitle').value.trim();
            const uploadButton = document.getElementById('uploadButton');
            const uploadStatus = document.getElementById('uploadStatus');

            if (!mediaInput.files.length || !mediaTitle) {
                alert('Please select a video and enter a title.');
                return;
            }

            uploadButton.disabled = true;
            mediaInput.disabled = true;
            document.getElementById('mediaTitle').disabled = true;
            uploadStatus.innerHTML = '<span class="spinner"></span>Analyzing video...';

            const file = mediaInput.files[0];
            if (!file.type.startsWith('video/mp4')) {
                alert('Please select an MP4 video.');
                resetUploadForm();
                return;
            }

            // Capture thumbnail
            let thumbnailUrl = '';
            try {
                uploadStatus.innerHTML = '<span class="spinner"></span>Generating thumbnail...';
                const thumbnailFile = await captureThumbnail(file);
                thumbnailUrl = await uploadThumbnailToStorage(thumbnailFile);
            } catch (error) {
                console.error('Thumbnail generation/upload error:', error);
                uploadStatus.textContent = 'Failed to generate/upload thumbnail. Proceeding without thumbnail.';
                thumbnailUrl = '';
            }

            // Calculate duration client-side
            const videoElement = document.createElement('video');
            videoElement.preload = 'metadata';
            videoElement.src = URL.createObjectURL(file);

            videoElement.onloadedmetadata = async () => {
                const durationSec = Math.floor(videoElement.duration);
                const hoursDur = Math.floor(durationSec / 3600);
                const minutesDur = Math.floor((durationSec % 3600) / 60);
                const secondsDur = durationSec % 60;

                // Format duration based on length
                let durationStr;
                if (hoursDur > 0) {
                    durationStr = `${hoursDur}:${minutesDur.toString().padStart(2, '0')}:${secondsDur.toString().padStart(2, '0')}`;
                } else if (minutesDur > 0) {
                    durationStr = `${minutesDur}:${secondsDur.toString().padStart(2, '0')}`;
                } else {
                    durationStr = `${secondsDur}`;
                }

                uploadStatus.innerHTML = '<span class="spinner"></span>Uploading video...';
                const mediaId = Date.now().toString();
                const identifier = `lustalbum-${mediaId}`;
                const filename = `${mediaTitle.replace(/[^a-zA-Z0-9]/g, '-')}.mp4`;
                const url = `https://s3.us.archive.org/${identifier}/${filename}`;

                try {
                    const fileData = await new Promise((resolve, reject) => {
                        const reader = new FileReader();
                        reader.onload = () => resolve(reader.result);
                        reader.onerror = () => reject(new Error('Failed to read file'));
                        reader.readAsArrayBuffer(file);
                    });

                    const xhr = new XMLHttpRequest();
                    xhr.open('PUT', url, true);
                    xhr.setRequestHeader('Authorization', 'LOW t1neWUa7JnuqGiMv:sLBddyAy31lVj4pR');
                    xhr.setRequestHeader('x-archive-auto-make-bucket', '1');
                    xhr.setRequestHeader('x-archive-queue-derive', '0');
                    xhr.setRequestHeader('x-archive-meta-title', mediaTitle);
                    xhr.setRequestHeader('x-archive-meta-mediatype', 'movies');

                    xhr.upload.onprogress = (event) => {
                        if (event.lengthComputable) {
                            const percent = Math.round((event.loaded / event.total) * 100);
                            uploadStatus.innerHTML = `<span class="spinner"></span>Uploading ${filename}... ${percent}%`;
                        }
                    };

                    await new Promise((resolve, reject) => {
                        xhr.onload = () => {
                            if (xhr.status === 200 || xhr.status === 201) {
                                uploadStatus.textContent = 'Uploaded video successfully';
                                resolve();
                            } else {
                                reject(new Error(`Upload failed with status ${xhr.status}`));
                            }
                        };
                        xhr.onerror = () => reject(new Error('Network error during upload'));
                        xhr.send(fileData);
                    });

                    const documentData = {
                        title: mediaTitle,
                        identifier: identifier,
                        userEmail: user.email,
                        mediaType: 'video',
                        url: url,
                        duration: durationStr,
                        thumbnailUrl: thumbnailUrl || ''
                    };
                    console.log("Creating document in Appwrite database:", documentData);
                    await database.createDocument(DATABASE_ID, VIDEO_COLLECTION_ID, 'unique()', documentData);
                    uploadStatus.textContent = 'Upload complete!';
                } catch (error) {
                    console.error('Upload error:', error);
                    uploadStatus.textContent = `Failed to upload video.`;
                    alert(`Failed to upload video: ${error.message}`);
                    resetUploadForm();
                    return;
                }

                setTimeout(() => {
                    hideUploadForm();
                    displayMedia();
                }, 1000);
            };

            videoElement.onerror = () => {
                console.error("Failed to analyze video duration.");
                alert('Failed to analyze video duration.');
                resetUploadForm();
            };

            videoElement.load();
        }

        function resetUploadForm() {
            console.log("Resetting upload form...");
            document.getElementById('uploadButton').disabled = false;
            document.getElementById('mediaInput').disabled = false;
            document.getElementById('mediaTitle').disabled = false;
        }

        async function displayMedia() {
            console.log("Displaying media...");
            const mediaGrid = document.getElementById('mediaGrid');
            mediaGrid.innerHTML = '<p class="text-gray-400 text-center">Loading videos...</p>';
            const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
            const user = JSON.parse(localStorage.getItem('user')); // Get logged-in user

            try {
                console.log("Fetching videos from Appwrite database...");
                const videoResponse = await database.listDocuments(DATABASE_ID, VIDEO_COLLECTION_ID);
                console.log("Videos fetched:", videoResponse.documents);
                const videos = videoResponse.documents.map(item => ({ ...item, mediaType: 'video' }));

                const filteredVideos = videos.filter(video => {
                    return video.title.toLowerCase().includes(searchTerm);
                });

                if (filteredVideos.length === 0) {
                    mediaGrid.innerHTML = '<p class="text-gray-400 text-center">No videos found.</p>';
                    return;
                }

                mediaGrid.innerHTML = '';
                filteredVideos.sort((a, b) => new Date(b.$createdAt) - new Date(a.$createdAt)).forEach(item => {
                    const mediaCard = document.createElement('div');
                    mediaCard.className = 'video-card';
                    const createdAt = new Date(item.$createdAt);
                    const now = new Date();
                    const diffMs = now - createdAt;
                    let timeAgo;

                    const seconds = Math.floor(diffMs / 1000);
                    const minutes = Math.floor(seconds / 60);
                    const hours = Math.floor(minutes / 60);
                    const days = Math.floor(hours / 24);
                    const months = Math.floor(days / 30);
                    const years = Math.floor(months / 12);

                    if (seconds < 60) {
                        timeAgo = `${seconds} sec ago`;
                    } else if (minutes < 60) {
                        timeAgo = `${minutes} min ago`;
                    } else if (hours < 24) {
                        timeAgo = `${hours} hour${hours === 1 ? '' : 's'} ago`;
                    } else if (days < 30) {
                        timeAgo = `${days} day${days === 1 ? '' : 's'} ago`;
                    } else if (months < 12) {
                        timeAgo = `${months} month${months === 1 ? '' : 's'} ago`;
                    } else {
                        timeAgo = `${years} year${years === 1 ? '' : 's'} ago`;
                    }

                    const durationStr = item.duration || '0';
                    const thumbnailUrl = item.thumbnailUrl || 'https://via.placeholder.com/220x140?text=No+Thumbnail';

                    // Determine if the video belongs to the logged-in user
                    const isOwnVideo = user && item.userEmail === user.email;
                    const titleSectionClass = isOwnVideo ? 'title-section golden-border' : 'title-section';

                    mediaCard.innerHTML = `
                        <div class="thumbnail-container">
                            <img src="${thumbnailUrl}" alt="Thumbnail" onerror="this.src='https://via.placeholder.com/220x140?text=Thumbnail+Error'">
                            <div style="position: absolute; top: 0; right: 0; padding: 0.25rem 0.5rem; background: rgba(0, 0, 0, 0.7); color: #ffffff; font-size: 0.75rem;">${durationStr}</div>
                        </div>
                        <div class="${titleSectionClass}">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <h3 style="margin: 0; font-size: 0.95rem; font-weight: 500; color: #e5e7eb;">${item.title}</h3>
                                <div style="color: #9ca3af; font-size: 0.8rem;">${timeAgo}</div>
                            </div>
                        </div>
                    `;
                    mediaCard.onclick = () => openMediaPopup(item.$id, item.identifier, item.title);
                    mediaGrid.appendChild(mediaCard);
                });
            } catch (error) {
                console.error('Error fetching videos:', error);
                mediaGrid.innerHTML = '<p class="text-gray-400 text-center">Failed to load videos. Please try again later.</p>';
            }
        }

        async function openMediaPopup(id, identifier, title) {
            console.log("Opening media popup for video ID:", id);
            const popup = document.getElementById('mediaPopup');
            const iframe = document.getElementById('popupVideo');
            const popupTitle = document.getElementById('popupTitle');
            const embedUrl = `https://archive.org/embed/${identifier}`;

            iframe.src = embedUrl;
            iframe.style.display = 'block';
            popupTitle.textContent = title;
            iframe.onerror = () => {
                console.error('Iframe load error for URL:', embedUrl);
                alert('Error loading video. Ensure the video is processed by Internet Archive.');
            };

            popup.style.display = 'block';
            document.getElementById('overlay').style.display = 'block';
            history.pushState({ popupOpen: 'media', id: id }, '', `#media-${id}`);
        }

        function closeMediaPopup() {
            console.log("Closing media popup...");
            const popup = document.getElementById('mediaPopup');
            const iframe = document.getElementById('popupVideo');
            iframe.src = '';
            popup.style.display = 'none';
            document.getElementById('overlay').style.display = 'none';
            history.replaceState(null, '', '/#home');
        }

        async function openProfilePopup() {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user) {
                alert('Please log in to view your profile.');
                return;
            }

            console.log("Opening profile popup for user:", user);
            const popup = document.getElementById('profilePopup');
            const profileInfo = document.getElementById('profileInfo');
            const profileVideos = document.getElementById('profileVideos');

            profileInfo.innerHTML = `
                <img src="defaultdp.png" alt="Profile Picture">
                <h2>${user.name}</h2>
                <p>${user.email}</p>
            `;

            profileVideos.innerHTML = '';

            try {
                console.log("Fetching profile videos for user email:", user.email);
                const videoResponse = await database.listDocuments(DATABASE_ID, VIDEO_COLLECTION_ID, [
                    Appwrite.Query.equal('userEmail', user.email)
                ]);
                console.log("Profile videos fetched:", videoResponse.documents);
                const videos = videoResponse.documents.map(item => ({ ...item, mediaType: 'video' }));

                if (videos.length === 0) {
                    profileVideos.innerHTML = '<p class="text-gray-400 text-center">No videos uploaded yet.</p>';
                } else {
                    videos.sort((a, b) => new Date(b.$createdAt) - new Date(a.$createdAt)).forEach(item => {
                        const createdAt = new Date(item.$createdAt);
                        const now = new Date();
                        const diffMs = now - createdAt;
                        let timeAgo;

                        const seconds = Math.floor(diffMs / 1000);
                        const minutes = Math.floor(seconds / 60);
                        const hours = Math.floor(minutes / 60);
                        const days = Math.floor(hours / 24);
                        const months = Math.floor(days / 30);
                        const years = Math.floor(months / 12);

                        if (seconds < 60) {
                            timeAgo = `${seconds} sec ago`;
                        } else if (minutes < 60) {
                            timeAgo = `${minutes} min ago`;
                        } else if (hours < 24) {
                            timeAgo = `${hours} hour${hours === 1 ? '' : 's'} ago`;
                        } else if (days < 30) {
                            timeAgo = `${days} day${days === 1 ? '' : 's'} ago`;
                        } else if (months < 12) {
                            timeAgo = `${months} month${months === 1 ? '' : 's'} ago`;
                        } else {
                            timeAgo = `${years} year${years === 1 ? '' : 's'} ago`;
                        }

                        const durationStr = item.duration || '0';
                        const thumbnailUrl = item.thumbnailUrl || 'https://via.placeholder.com/220x140?text=No+Thumbnail';

                        const mediaCard = document.createElement('div');
                        mediaCard.className = 'video-card';

                        mediaCard.innerHTML = `
                            <div class="thumbnail-container">
                                <img src="${thumbnailUrl}" alt="Thumbnail" onerror="this.src='https://via.placeholder.com/220x140?text=Thumbnail+Error'">
                                <div style="position: absolute; top: 0; right: 0; padding: 0.25rem 0.5rem; background: rgba(0, 0, 0, 0.7); color: #ffffff; font-size: 0.75rem;">${durationStr}</div>
                            </div>
                            <div class="title-section">
                                <div style="display: flex; justify-content: space-between; align-items: center;">
                                    <h3 style="margin: 0; font-size: 0.95rem; font-weight: 500; color: #e5e7eb;">${item.title}</h3>
                                    <div style="color: #9ca3af; font-size: 0.8rem;">${timeAgo}</div>
                                </div>
                            </div>
                        `;
                        mediaCard.onclick = () => {
                            closeProfilePopup();
                            openMediaPopup(item.$id, item.identifier, item.title);
                        };
                        profileVideos.appendChild(mediaCard);
                    });
                }
            } catch (error) {
                console.error('Error loading profile videos:', error);
                profileVideos.innerHTML = '<p class="text-gray-400 text-center">Failed to load videos.</p>';
            }

            popup.style.display = 'block';
            document.getElementById('overlay').style.display = 'block';
            history.pushState({ popupOpen: 'profile' }, '', '#profile');
        }

        function closeProfilePopup() {
            console.log("Closing profile popup...");
            document.getElementById('profilePopup').style.display = 'none';
            document.getElementById('overlay').style.display = 'none';
            history.replaceState(null, '', '/#home');
        }

        // Handle direct URL navigation and back button
        async function handleInitialNavigation() {
            console.log("Handling initial navigation...");
            const hash = window.location.hash;
            if (hash.startsWith('#media-')) {
                const videoId = hash.replace('#media-', '');
                try {
                    const video = await database.getDocument(DATABASE_ID, VIDEO_COLLECTION_ID, videoId);
                    openMediaPopup(video.$id, video.identifier, video.title);
                } catch (error) {
                    console.error('Error loading video from URL:', error);
                    history.replaceState(null, '', '/#home');
                }
            } else if (hash === '#profile') {
                openProfilePopup();
            } else {
                history.replaceState(null, '', '/#home');
            }
        }

        // Handle back/forward navigation
        window.onpopstate = function(event) {
            console.log("Handling popstate event:", event.state);
            const state = event.state;
            if (state && state.popupOpen === 'media' && state.id) {
                database.getDocument(DATABASE_ID, VIDEO_COLLECTION_ID, state.id)
                    .then(video => {
                        openMediaPopup(video.$id, video.identifier, video.title);
                    })
                    .catch(error => {
                        console.error('Error reloading video:', error);
                        closeMediaPopup();
                    });
            } else if (state && state.popupOpen === 'profile') {
                openProfilePopup();
            } else {
                closeMediaPopup();
                closeProfilePopup();
            }
        };

        // Load media, update header, and handle initial navigation on page load
        window.onload = function() {
            console.log("Page loaded, initializing...");
            updateHeader();
            displayMedia();
            handleInitialNavigation();
        };
    </script>
    <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'936eeb6fed65c002',t:'MTc0NTc2MzE5Ny4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>
    <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9373ccfa1e7a53d5',t:'MTc0NTgxNDM3OC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>
    <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'93748d09ffa5453e',t:'MTc0NTgyMjI0NS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>
    <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'937647b3db176771',t:'MTc0NTg0MDM3Ny4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>
    <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9376a8d649a17bc3',t:'MTc0NTg0NDM1NS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>
    <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'9384e035cf60bfb5',t:'MTc0NTk5MzQyNC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>
</body>
</html>
